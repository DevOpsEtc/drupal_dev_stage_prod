#########################################################################
#### filename:  lemp.yml                                              ####
#### path:      ~/src/deploy/roles/drupal/tasks/                 ####
#### role:      drupal development                                   ####
#### purpose:   install EMP - Nginx, PHP-FPM, MariaDB                ####
#### version:   08/18/2014                                           ####
#########################################################################

---

#########################################################################
##### Nginx - Web Server                                             ####
#########################################################################

# download /make w/ upload progress plugin: 


- name: Lemp | Starting dev playlist on {{ v_host }}
  tags: [lemp]
  local_action: osx_say msg="dev playlist is starting" voice={{ v_voice }}

- name: Lemp | Add Nginx repository to apt sources list on {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  apt_repository:
    repo='ppa:nginx/stable'
    state=present
    update_cache=yes

- name: Lemp | Install Nginx web server to {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  apt: pkg=nginx state=latest

- name: Lemp | Ensure Nginx service is started and boot enabled on {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  service: name=nginx state=started enabled=yes

- name: Lemp | Push Nginx global config to /etc/nginx/nginx.conf on {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  template:
    src=nginx.conf.j2
    dest=/etc/nginx/nginx.conf
    owner=root
    group=root
    mode=644

- name: Lemp | Create Nginx project directories on {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  file:
    path=/var/{{ item.d }}
    state=directory
    owner={{ item.o }}
    group={{ item.g }}
    mode={{ item.p }}
  with_items:
    - { d: 'www',                              o: '{{ v_user }}', g: 'www-data',     p: '0750' }
    - { d: 'www/{{ v_vhost }}',                o: '{{ v_user }}', g: 'www-data',     p: '0750' }
    - { d: 'www/{{ v_vhost }}/public',         o: '{{ v_user }}', g: 'www-data',     p: '2755' }
    - { d: 'www/{{ v_vhost }}/private/aux',    o: 'www-data',     g: '{{ v_user }}', p: '2770' }
    - { d: 'www/{{ v_vhost }}/private/files',  o: 'www-data',     g: '{{ v_user }}', p: '2770' }
    - { d: 'www/{{ v_vhost }}/private/tmp',    o: 'www-data',     g: '{{ v_user }}', p: '2770' }

- name: Lemp | Add Nginx server blocks to {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  template:
    src=nginx.srv.blk.j2
    dest=/etc/nginx/sites-available/{{ v_vhost }}
    owner=root
    group=root
    mode=644

- name: Lemp | Enable Nginx server blocks on {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  file:
    src=/etc/nginx/sites-available/{{ v_vhost }}
    dest=/etc/nginx/sites-enabled/{{ v_vhost }}
    owner=root
    group=root
    state=link

- name: Lemp | Disable default Nginx server blocks on {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  file:
    src=/etc/nginx/sites-available/default
    dest=/etc/nginx/sites-enabled/default
    owner=root
    group=root
    state=absent
  #note: equivalent to $ unlink /etc/nginx/sites-enabled/default

- name: Lemp | Check Nginx config syntax on {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  command: nginx -t
  register: nginx
  failed_when: "'syntax is ok' not in nginx.stderr"

- name: Lemp | Restart Nginx daemon on {{ v_host }}
  sudo: yes
  tags: [lemp, nginx]
  service: name=nginx state=restarted

# created @localhost to prevent "directory already exists and is not empty" git clone error
- name: Lemp | Create test file to verify LEMP stack on {{ lookup('env', 'HOST') }}
  tags: [lemp, nginx, x]
  local_action: template
    src=test.php.j2
    dest={{ drup_install_path_local }}/_test.php

#########################################################################
##### MariaDB - MySQL Relational Database                            ####
#########################################################################

- name: Lemp | Install MariaDB database server and dependencies to {{ v_host }}
  sudo: yes
  tags: [lemp, mariadb]
  apt: pkg={{ item }} state=latest
  with_items:
    - mariadb-server      # database server
    - python-mysqldb      # database creation via ansible

- name: Lemp | Ensure MariaDB service is started and boot enabled on {{ v_host }}
  sudo: yes
  tags: [lemp, mariadb]
  service: name={{ mysql_service }} state=started enabled=yes

- name: Lemp | Push MariaDB global config to /etc/mysql/my.cnf on {{ v_host }}
  sudo: yes
  tags: [lemp, mariadb]
  template:
    src=my.cnf.global.j2
    dest={{ mysql_conf_dir }}my.cnf
    owner=root
    group=root
    mode=0644

- name: Lemp | Restart MariaDB daemon on {{ v_host }}
  sudo: yes
  tags: [lemp, mariadb]
  service: name=mysql state=restarted

- name: Lemp | Check if .my.cnf file exists at ~/ on {{ v_host }}
  tags: [lemp, mariadb]
  stat: "path=~/.my.cnf"
  register: mycnf

- name: Lemp | Update MySQL root password for all root accounts on {{ v_host }}
  tags: [lemp, mariadb]
  mysql_user: name=root host={{ item }} password={{ mysql_root_pass }}
  with_items:
   - "{{v_vhost }}"     # root user for localhost with resolved IP
   - 127.0.0.1          # root user for localhost without resolved IP for IPv4
   - ::1                # root user for localhost without resolved IP for IPv6
   - localhost          # root user for localhost with resolved IP
  when: mycnf.stat.exists == false

- name: Lemp | Push .my.cnf file with root password credentials to {{ v_host }}
  tags: [lemp, mariadb]
  template:
    src=my.cnf.j2
    dest=~/.my.cnf
    owner={{ v_user }}
    group={{ v_user }}
    mode=0644
  when: mycnf.stat.exists == false

- name: Lemp | Restart MariaDB daemon on {{ v_host }}
  sudo: yes
  tags: [lemp, mariadb]
  service: name=mysql state=restarted

##########################################################################
##### PHP - Server-Side Scripting                                     ####
##########################################################################

- name: Lemp | Install PHP-FPM, dependencies & tools on {{ v_host }}
  sudo: yes
  tags: [lemp, php]
  apt: pkg={{ item }} state=latest
  with_items:
    - php5-fpm        # server-side scripting w/ FastCGI process manager
    - php5-mysql      # mysql database support
    - php5-cli        # command-line interpreter
    - php5-gd         # graphics support
    - php5-dev        # PHP5 module development; pecl uploadprogress dependency
    - libssh2-php     # drupal updates from gui via ssh; use drush instead
    - php5-curl       # php/curl integration
    - php-apc
#     - php5-xdebug    # php debugging and profiling tools
#     - php5-xhprof    # performance and benchmarking tools
#     - php5-mcrypt ()
#     - php5-memcache
#     - php5-sqlite
#     - php5-tidy
#     - php5-xsl
#     - php5-imagick

- name: Lemp | Update php.ini settings on {{ v_host }}
  sudo: yes
  tags: [lemp, php]
  lineinfile:
    dest=/etc/php5/fpm/php.ini
    state=present
    regexp=^;?{{ item.key }}
    insertafter='\[PHP\]'
    line='{{ item.key }} = {{ item.value }}'
  with_items:
    - { key: 'cgi.fix_pathinfo',              value: '0' }
    - { key: 'memory_limit',                  value: '128M' }
    - { key: 'upload_max_filesize',           value: '28M' }
    - { key: 'post_max_size',                 value: '28M' }
    - { key: 'expose_php',                    value: 'Off' }
    - { key: 'display_errors',                value: 'Off' }
    - { key: 'display_startup_errors',        value: 'Off' }
    - { key: 'log_errors',                    value: 'On' }
    - { key: 'error_log',                     value: '/var/log/php_errors.log' }
    - { key: 'session.cache_limiter',         value: 'nocache' }
    - { key: 'session.auto_start',            value: '0' }
    - { key: 'allow_url_fopen',               value: 'Off' }
    - { key: 'session.name',                  value: 'Session' }
    - { key: 'opcache.enable',                value: '1' }
    - { key: 'opcache.memory_consumption',    value: '64' }
    - { key: 'opcache.max_accelerated_files', value: '5000' }
    - { key: 'extension',                     value: 'uploadprogress.so' }
    - { key: 'sendmail_path',                 value: '"/usr/bin/env /usr/local/bin/catchmail --smtp-ip {{ m_catch_smtp_ip }} -f {{ drup_site_mail }}"' }

- name: Lemp | Update php.ini (cli) settings on {{ v_host }}
  sudo: yes
  tags: [lemp, php]
  lineinfile:
    dest=/etc/php5/cli/php.ini
    state=present
    regexp=^;?{{ item.key }}
    insertafter='\[PHP\]'
    line='{{ item.key }} = {{ item.value }}'
  with_items:
    - { key: 'sendmail_path',                 value: '"/usr/bin/env /usr/local/bin/catchmail --smtp-ip {{ m_catch_smtp_ip }} -f {{ drup_site_mail }}"' }
  # Notes: this php.ini used by drush & php mail`

- name: Lemp | Set pear & pecl config php.ini path on {{ v_host }}
  tags: [lemp, php]
  command: "{{ item }} config-set php_ini /etc/php5/fpm/php.ini"
  with_items:
    - pear
    - pecl

- name: Lemp | Install uploadprogress via pecl to {{ v_host }}
  sudo: yes
  tags: [lemp, php]
  command: pecl install uploadprogress
  register: pecl_result
  changed_when: "'already installed' not in pecl_result.stdout"
  failed_when: "pecl_result.stderr"

- name: Lemp | Restart PHP-FPM daemon on {{ v_host }}
  sudo: yes
  tags: [lemp, php-fpm]
  service: name=php5-fpm state=restarted

- name: Lemp | Dev playslist is all done!
  tags: [lemp]
  local_action: osx_say msg="dev playlist is complete" voice={{ v_voice }}

